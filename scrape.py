import requests
from bs4 import BeautifulSoup

def scrape_website():
    for i in range(0, 60, 20):
        url = f"https://nvd.nist.gov/vuln/search/results?isCpeNameSearch=false&results_type=overview&form_type=Basic&search_type=all&startIndex={i}"
        response = requests.get(url)
        html_content = response.text
        soup = BeautifulSoup(html_content, 'html.parser')

        # find the words with CVE
        cve_tags = soup.find_all("a", href=lambda href: href and href.startswith('/vuln/detail'))
        for tag in cve_tags:
            cve_code = tag['href']
            cve_detail = cve_code.split('/detail/')[-1] # get only part after "detail"
            print(cve_detail)
            scrape_cve(cve_detail)
            break 
        break # right now i have these 2 breaks to just process 1 cve
              # get rid of both breaks once we want to do mass web scraping
        

def scrape_cve(cve_detail):
    url = f"https://www.cvedetails.com/cve/{cve_detail}/?q={cve_detail}"
    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36"
    response = requests.get(url, headers={'User-Agent': user_agent})
    html_content = response.text
    soup=BeautifulSoup(html_content, 'html.parser')
    # get vulnerability details
    cve_summary_div = soup.find('div', class_='cvedetailssummary-text')
    if cve_summary_div:
        cve_summary_text = cve_summary_div.text.strip()
        print(cve_summary_text)
    else:
        print("Could not find the CVE summary.")
    
    # get cvss scores
    # base score
    base_score = soup.find(class_='cvssbox score_5')
    if base_score is not None:
        value = base_score.text
        print(f"base score: {value}")
    else:
        print("base score not found.")

    # exploitability score
    exploitablity_score = soup.find(class_='cvssbox score_1')
    if exploitablity_score is not None:
        print(f"Exploitability score: {exploitablity_score.text}")
    else:
        print("exploitability score is not available")

    # impact score
    impact_score = soup.find(class_='cvssbox score_3')
    if impact_score is not None:
        print(f"Impact score: {impact_score.text}")
    else:
        print("impact score is not available")
    
    # cvss vector
    cvss_vector = soup.find('div', class_='d-flex flex-row justify-content-evenly text-secondary d-grid gap-3')  # Find the outer div element with class1
    if cvss_vector:
        inner_divs = cvss_vector.find_all('div')  # Find all div elements inside the outer div
        for div in inner_divs:
            print(f"cvss vector info: {div.text}")
    else:
        print("cvss_vector not found.")
    
    # description
    description = soup.find('div', class_='ms-1')
    if description:
        print(f"description: {description.text}")
    else:
        print("descrtiption not available")


if __name__ == "__main__": 
    scrape_website()
    # scrape_cve("CVE-2024-1215")
